import tensorflow as tf
import os, sys, pickle
import numpy as np

def unpickle(file):
    fp = open(file, 'rb')
    if sys.version_info.major == 2:
        data = pickle.load(fp)
    elif sys.version_info.major == 3:
        data = pickle.load(fp, encoding='latin-1')
    fp.close()
    return data


def _int64_feature(value):
    return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))


def _bytes_feature(value):
    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))


def convert_tokens(tokens, filepath):
    print('Writing ', filepath)
    writer = tf.python_io.TFRecordWriter(filepath)
    for index in range(tokens.shape[0]):
        token = tokens[index, :].tolist()
        token_feature = tf.train.Feature(float_list=tf.train.FloatList(value=token))
        example = tf.train.Example(features=tf.train.Features(feature={
                  'token': token_feature}))
        writer.write(example.SerializeToString())
    writer.close()

    with open(filepath+".info", 'w') as f:
        f.write("counts: " + str(tokens.shape[0]))


def convert_tokens_and_labels(tokens, labels, filepath, num_classes = 0):
    num_examples = len(labels)
    if tokens.shape[0] != num_examples:
        raise ValueError("Tokens size %d does not match label size %d." %
                        (len(tokens), num_examples))
    if min(labels) < 0:
        raise ValueError("Min lablel index should not be negtive!")

    if num_classes <= 0:
        num_classes = max(labels)+1

    print('Writing ', filepath)
    writer = tf.python_io.TFRecordWriter(filepath)
    for index in range(num_examples):
        token = tokens[index, :].tolist()
        token_feature = tf.train.Feature(float_list=tf.train.FloatList(value=token))
        example = tf.train.Example(features=tf.train.Features(feature={
                  'label': _int64_feature(labels[index]),
                  'token': token_feature}))
        writer.write(example.SerializeToString())
    writer.close()

    with open(filepath+".info", 'w') as f:
        f.write("counts: " + str(num_examples)+"\n")
        f.write("num_classes: " + str(num_classes))


def read(filename_queue, doc_len, num_classes):
    reader = tf.TFRecordReader()
    _, serialized_example = reader.read(filename_queue)
    features = tf.parse_single_example(
        serialized_example,
        # Defaults are not specified since both keys are required.
        features={
            'label': tf.FixedLenFeature([], tf.int64),
            'token': tf.FixedLenFeature([doc_len], tf.float32),
        })

    # Convert label from a scalar uint8 tensor to an int32 scalar.
    image = tf.cast(features['token'], tf.int32)
    label = tf.one_hot(tf.cast(features['label'], tf.int32), num_classes)
    return image, label

def read_unsup(filename_queue, doc_len):
    reader = tf.TFRecordReader()
    _, serialized_example = reader.read(filename_queue)
    features = tf.parse_single_example(
        serialized_example,
        # Defaults are not specified since both keys are required.
        features={
            'token': tf.FixedLenFeature([doc_len], tf.float32),
        })

    image = tf.cast(features['token'], tf.int32)
    return image


def generate_batch(
        example,
        min_queue_examples,
        batch_size, shuffle, seed = None):
    """
    Arg:
        list of tensors.
    """
    num_preprocess_threads = 2 

    if shuffle:
        ret = tf.train.shuffle_batch(
            example,
            batch_size=batch_size,
            num_threads=num_preprocess_threads,
            seed = seed,
            allow_smaller_final_batch=True,
            capacity=min_queue_examples + 3 * batch_size,
            min_after_dequeue=min_queue_examples)
    else:
        ret = tf.train.batch(
            example,
            batch_size=batch_size,
            num_threads=num_preprocess_threads,
            allow_smaller_final_batch=True,
            capacity=min_queue_examples + 3 * batch_size)

    return ret


def generate_filename_queue(filenames,  num_epochs=None):
    print("filenames in queue:", filenames)
    return tf.train.string_input_producer(filenames, num_epochs=num_epochs)


def inputs(batch_size, filename, DOC_LEN, NUM_CLASSES, shuffle=True, num_epochs=None, seed=None):
    min_queue_examples = get_tfrecord_sample_counts(filename)
    min_queue_examples = int(0.4*min_queue_examples)
    filenames = [filename]

    filename_queue = generate_filename_queue(filenames, num_epochs)
    if NUM_CLASSES > 0:
        image, label = read(filename_queue, DOC_LEN, NUM_CLASSES)
        return generate_batch([image, label], min_queue_examples, batch_size, shuffle, seed=seed)
    else:
        image = read_unsup(filename_queue, DOC_LEN)
        return generate_batch([image], min_queue_examples, batch_size, shuffle, seed=seed)

def get_tfrecord_sample_counts(filename):
    with open(filename+".info", 'r') as f:
        for line in f.readlines():
            line_split = line.split(':')
            if line_split[0].strip() == 'counts':
                return int(line_split[1].strip())
    
    return None

def get_tfrecord_classes_counts(filename):
    with open(filename+".info", 'r') as f:
        for line in f.readlines():
            line_split = line.split(':')
            if line_split[0].strip() == 'num_classes':
                return int(line_split[1].strip())

    return None
    
def get_tfrecord_word_counts(filename, doc_maxlen):
    batch_size = 100
    num_classes = get_tfrecord_classes_counts(filename)
    train_x, train_y = inputs(batch_size=batch_size,
                              filename=filename,
                              DOC_LEN=doc_maxlen,
                              NUM_CLASSES=num_classes,
                              shuffle=False)

    num_train_size = get_tfrecord_sample_counts(filename)
    num_iter_per_epoch = num_train_size/batch_size
    wc = Counter()
    with tf.Session() as sess:
        coord=tf.train.Coordinator()
        threads= tf.train.start_queue_runners(coord=coord)

        for batch_idx in range(num_iter_per_epoch):
            docs, label = sess.run([train_x, train_y])
            wc.update(docs.ravel().tolist())

        coord.request_stop()
        coord.join(threads)


    return wc

dataset_utils
datloader
import numpy as np
import json
import re
import itertools
from collections import Counter

#SENT_MARK = "</s>"
NULL_MARK = "<null>"
UNK_MARK = "<unk>"

#for english word segmentation
def clean_str(string):
    """
    Tokenization/string cleaning for all datasets except for SST.
    Original taken from https://github.com/yoonkim/CNN_sentence/blob/master/process_data.py
    """
    string = re.sub(r"[^A-Za-z0-9(),!?\'\`]", " ", string)
    string = re.sub(r"\'s", " \'s", string)
    string = re.sub(r"\'ve", " \'ve", string)
    string = re.sub(r"n\'t", " n\'t", string)
    string = re.sub(r"\'re", " \'re", string)
    string = re.sub(r"\'d", " \'d", string)
    string = re.sub(r"\'ll", " \'ll", string)
    string = re.sub(r",", " , ", string)
    string = re.sub(r"!", " ! ", string)
    string = re.sub(r"\(", " \( ", string)
    string = re.sub(r"\)", " \) ", string)
    string = re.sub(r"\?", " \? ", string)
    string = re.sub(r"\s{2,}", " ", string)
    return string.strip().lower()

def load_config(config_fname):

    config_dict = {}
    with open(config_fname, 'r') as f:
        for line in f.readlines():
            if len(line) < 2:
                continue
            if line[0] == '#':
                continue

            key, value = line.split(':',1)
            config_dict[key] = value.strip()

    if 'max_vocab_len' not in config_dict:
        config_dict['max_vocab_len'] = -1
    else:
        config_dict['max_vocab_len'] = int(config_dict['max_vocab_len'])

    config_dict['doc_maxlen'] = int(config_dict['doc_maxlen'])
    config_dict['train_val_split'] = float(config_dict['train_val_split'])

    return config_dict

def load_data_and_labels(data_path, with_label = 1):
    """
    Loads MR polarity data from files, splits the data into words and generates labels.
    Returns split sentences and labels.
    """
    # Load data from files
    train_examples_ = []
    train_y = []
    
    # for handling empty train dataset zzx
    if len(data_path) == 0:
        return train_examples_, train_y
        
    train_examples = list(open(data_path, 'r').readlines())
    train_examples = [s.strip() for s in train_examples]


    # i = 0
    if with_label == 1:
        for line in train_examples:
        #     i += 1
        #     if i > 100000:
        #         break

            if(len(line))<5:
                continue; #remove short sentence  maoxue
            for sep_id in range(1,5):  #maoxue change to 3 / zzx change to 5
                if line[sep_id] == ' ' or line[sep_id] == ',' or line[sep_id] == '\t':
                    break

            train_examples_.append(line[sep_id+1:].split(' '))
#            train_examples_.append(clean_str(line[sep_id+1:]).split(' '))

            train_y.append(line[:sep_id])

        train_y = [int(i) for i in train_y]  # convert from str to int
        # print 'train y', train_y
        # train_y = [int(i/10) if i >= 100 else i for i in train_y] # zzx add
        # c2i_dict = {category: i for i, category in enumerate(sorted(list(set(train_y))))}

        c2i_dict={}

        with open('133_to_121.txt', mode='r') as f:
            for o in f.readlines():
                o = o.replace('\n', '').split(':')
                c2i_dict[o[0]] = o[1]

        train_y = [int(c2i_dict[str(c)]) for c in train_y]
        # print train_y[:50]



    else:
        for line in train_examples:
           train_examples_.append(line.split(' '))            
#           train_examples_.append(clean_str(line).split(' '))            


    return train_examples_, train_y

# load jd data and label, no label mapping
def load_data_and_labels_jd(data_path, with_label=1):
    """
    Loads MR polarity data from files, splits the data into words and generates labels.
    Returns split sentences and labels.
    """
    # Load data from files
    train_examples = list(open(data_path, 'r').readlines())
    train_examples = [s.strip() for s in train_examples]

    train_examples_ = []
    train_y = []

    if with_label == 1:
        for line in train_examples:
            if (len(line)) < 5:
                continue;  # remove short sentence  maoxue
            for sep_id in range(1, 3):  # maoxue change to 3
                if line[sep_id] == ' ' or line[sep_id] == ',' or line[sep_id] == '\t':
                    break

            train_examples_.append(line[sep_id + 1:].split(' '))
            #            train_examples_.append(clean_str(line[sep_id+1:]).split(' '))

            train_y.append(line[:sep_id])

        #c2i_dict = {category: i for i, category in enumerate(sorted(list(set(train_y))))}
        train_y = [int(c) for c in train_y]
    else:
        for line in train_examples:
            train_examples_.append(line.split(' '))
            #           train_examples_.append(clean_str(line).split(' '))

    return train_examples_, train_y


def pad_sentences(sentences, padding_word=NULL_MARK, sequence_length = 0, truncating='post'):
    """
    Pads all sentences to the same length. The length is defined by the longest sentence.
    Returns padded sentences.
    """

    if sequence_length <= 0:
        sequence_length = max(len(x) for x in sentences)

    padded_sentences = []
    if truncating == 'post':
        for i in range(len(sentences)):
            sentence = sentences[i]
            sentence = sentence[:np.minimum(sequence_length, len(sentence))]
            num_padding = sequence_length - len(sentence)
            new_sentence = sentence + [padding_word] * num_padding
            padded_sentences.append(new_sentence)
    elif truncating == 'pre':
        for i in range(len(sentences)):
            sentence = sentences[i]
            sentence = sentence[-np.minimum(sequence_length, len(sentence)):]
            num_padding = sequence_length - len(sentence)
            new_sentence = sentence + [padding_word] * num_padding
            padded_sentences.append(new_sentence)

    return padded_sentences


def build_vocab(sentences, max_vocab_len = 10000):
    """
    Builds a vocabulary mapping from word to index based on the sentences.
    Returns vocabulary mapping and inverse vocabulary mapping.
    """
    if max_vocab_len <= 0:
        max_vocab_len = 200000

    # Build vocabulary
    word_counts = Counter(itertools.chain(*sentences))
    print "total number of different words:  ", len(word_counts)

    # Mapping from index to word
    vocabulary_inv = [NULL_MARK,UNK_MARK]
    max_vocab_len -= len(vocabulary_inv)
    vocabulary_inv += [x[0] for x in word_counts.most_common(max_vocab_len)]

    # Mapping from word to index
    vocabulary = {x: i for i, x in enumerate(vocabulary_inv)}

    return [vocabulary, vocabulary_inv]

def json_save_vocab(vocab, fname):
    with open(fname,'w') as f: 
        f.write(json.dumps(vocab, ensure_ascii=False,encoding='utf-8'))

def json_load_vocab(fname):
    with open(fname,'r') as f: 
        vocab_unicode = json.load(f)

    vocab = {}
    for (k, v) in vocab_unicode.items():
        vocab[k.encode('utf-8')] = v

    return vocab

def build_input_data(sentences,vocabulary, padding=True):
    """
    Maps sentencs and labels to vectors based on a vocabulary.
    """
    unk_index = vocabulary[UNK_MARK]
    if padding:
        nsents, max_sent = len(sentences), len(sentences[0])
        x = np.ones((nsents, max_sent), "int32")*unk_index
        for i, sentence in enumerate(sentences):
            for j, word in enumerate(sentence):
                try:
                    x[i,j] = vocabulary[word]
                except:
                    pass
    else:
        x = []
        for sentence in sentences:
            xi = []
            for word in sentence:
                try:
                    xi.append(vocabulary[word])
                except:
                    xi.append(unk_index)
            x.append(xi)

    return x


def load_bin_vec(fname, vocab):
    """
    Loads Kx1 word vecs from Google (Mikolov) word2vec
    """
    word_vecs = {}
    with open(fname, "rb") as f:
        header = f.readline()
        vocab_size, layer1_size = map(int, header.split())
        binary_len = np.dtype('float32').itemsize * layer1_size
        for line in xrange(vocab_size):
            word = []
            while True:
                ch = f.read(1)
                if ch == ' ':
                    word = ''.join(word)
                    break
                if ch != '\n':
                    word.append(ch)   
            if word in vocab:
               word_vecs[word] = np.fromstring(f.read(binary_len), dtype='float32')  
            else:
                f.read(binary_len)
    return word_vecs, layer1_size

def add_unknown_words(word_vecs, vocab, min_df, k):
    """
    For words that occur in at least min_df documents, create a separate word vector.    
    0.25 is chosen so the unknown vectors have (approximately) same variance as pre-trained ones
    """
    for word in vocab:
        if word not in word_vecs and vocab[word] >= min_df:
            word_vecs[word] = np.random.uniform(-0.25,0.25,k)  

def get_W(word_vecs, k):
    """
    Get word matrix. W[i] is the vector for word indexed by i
    """
    vocab_size = len(word_vecs)
    word_idx_map = dict()
    W = np.zeros(shape=(vocab_size+1, k), dtype='float32')            
    W[0] = np.zeros(k, dtype='float32')
    i = 1
    for word in word_vecs:
        W[i] = word_vecs[word]
        word_idx_map[word] = i
        i += 1
    return W, word_idx_map

def get_W_with_vocal(word_vecs, k, vocab):
    #assert(len(word_vecs)==len(vocab))
    vocab_size = len(word_vecs)
    W = np.zeros(shape=(vocab_size+1, k), dtype='float32') 
    for word in word_vecs:
        W[vocab[word]] = word_vecs[word]           
    return W


def load_jd_data(test_path, sequence_length=0, vocabulary=None, max_vocab_len=10000, padding=True):
    """
    Loads and preprocessed data for the MR dataset.
    Returns input vectors, labels, vocabulary, and inverse vocabulary.
    """
    # Load and preprocess data
    print
    "loading sentences and labels..."

    te_sentences, te_y = load_data_and_labels_jd(test_path, 1)
    sentences =  te_sentences

    if padding:
        print
        "padding sentences..."
        sentences = pad_sentences(sentences, sequence_length=sequence_length, padding_word=NULL_MARK)

    print
    "creating input data..."
    x = build_input_data(sentences, vocabulary, padding)
    return x, te_y, vocabulary

def load_data(train_path, test_path, sequence_length = 0, vocabulary = None, max_vocab_len = 10000, padding = True):
    """
    Loads and preprocessed data for the MR dataset.
    Returns input vectors, labels, vocabulary, and inverse vocabulary.
    """
    # Load and preprocess data
    print "loading sentences and labels..."

    tr_sentences, tr_y = load_data_and_labels(train_path, 1)
    te_sentences, te_y = load_data_and_labels(test_path, 1)

    
    sentences = tr_sentences + te_sentences

    sentence_lens = [len(sent) for sent in sentences]
    print "number of train data: ", len(tr_sentences)
    print "number of test data: ", len(te_sentences)
    print "max length of documents: ", max(sentence_lens)
    print "min length of documents: ", min(sentence_lens)
    print "avg length of documents: ", float(sum(sentence_lens))/len(sentences)
    
    if vocabulary == None:
        print "creating vocabulary..."
        vocabulary, vocabulary_inv = build_vocab(sentences, max_vocab_len = max_vocab_len)
 
    if padding:
        print "padding sentences..."
        sentences = pad_sentences(sentences, sequence_length = sequence_length, padding_word = NULL_MARK)

    print "creating input data..."
    x = build_input_data(sentences, vocabulary, padding) 

    num_tr = len(tr_sentences)
    tr_x=x[0:num_tr]
    te_x=x[num_tr:]
    
    return tr_x, tr_y, te_x, te_y, vocabulary


def load_unsup_data(file_path, sequence_length, vocabulary, padding = True):
    print "loading unsup sentences..."
    try:
        sentences, _ = load_data_and_labels(file_path, 0)
    except:
        return None

    print "number of unsup train data: ", len(sentences)


    x = docs2ind(sentences, vocabulary, sequence_length, padding)
    return x

def load_pretrain_word2vec(w2v_path, vocabulary):
#    print "loading word2vec vectors..."
    w2v, w2v_dims = load_bin_vec(w2v_path, vocabulary)
    
    print "num words already in word2vec: " + str(len(w2v))
    add_unknown_words(w2v, vocabulary,1, w2v_dims)

    weight = get_W_with_vocal(w2v, w2v_dims,vocabulary)

    return weight

def docs2ind(docs, vocab, max_doc_len, padding):
    unk_index = vocab[UNK_MARK]
    if padding:
        null_index = vocab[NULL_MARK]
        x = np.ones((len(docs), max_doc_len), 'int32')*null_index
        for i, doc in enumerate(docs):
            ind = []
            for word in doc:
                try:
                    ind.append(vocab[word])
                except:
                    ind.append(unk_index)
                    pass

                if len(ind) == max_doc_len:
                    break

            ind = np.array(ind)
            x[i, :len(ind)] = ind
    else:
        x = []
        for doc in docs:
            xi = []
            for word in doc:
                try:
                    xi.append(vocab[word])
                except:
                    xi.append(unk_index)
                    pass

            x.append(xi)

    return x

def doc_ind2bow(x, vocab_len):
    nx, doc_len = x.shape
    bow = np.zeros((nx, vocab_len), 'float32')
    for i in range(nx):
        idx, counts = zip(*Counter(x[i,:]).most_common())
        bow[i, idx] = counts

    return bow

def doc_ind2onehot(x, vocab_len):
    nx, doc_len = x.shape
    onehot = np.zeros((nx, doc_len, vocab_len), 'float32')
    for i in range(nx):
        xi = x[i,:]
        onehoti = np.zeros((doc_len, vocab_len), 'float32')
        for j in range(doc_len):
            try:
                onehoti[j, xi[j]] = 1.
            except:
                pass
        onehot[i,:,:] = onehoti

    return onehot

def data_split(xdata, ydata, split_rate=0.1, shuffle=True):
    np.random.seed(1113)

    ntotal = xdata.shape[0]
    nval = int(split_rate*ntotal)

    xdata = np.array(xdata)
    index = np.array(range(ntotal))
    if shuffle:
        np.random.shuffle(index)

    teX = xdata[index[:nval],:]
    trX = xdata[index[nval:],:]

    if ydata == None:
        trY = None
        teY = None
    else:
        ydata = np.array(ydata)
        teY = ydata[index[:nval]]
        trY = ydata[index[nval:]]

    return trX, trY, teX, teY

def batch_iter(data, batch_size, num_epochs):
    """
    Generates a batch iterator for a dataset.
    """
    data = np.array(data)
    data_size = len(data)
    num_batches_per_epoch = int(len(data)/batch_size) + 1
    for epoch in range(num_epochs):
        # Shuffle the data at each epoch
        shuffle_indices = np.random.permutation(np.arange(data_size))
        shuffled_data = data[shuffle_indices]
        for batch_num in range(num_batches_per_epoch):
            start_index = batch_num * batch_size
            end_index = min((batch_num + 1) * batch_size, data_size)
            yield shuffled_data[start_index:end_index]

def iter_lmdata(data, batch_size, num_epochs, sample_length = 64, null_index = 0):

    data_size = len(data)
    num_batches_per_epoch = int(data_size/batch_size) + 1
    for epoch in range(num_epochs):
        for batch_num in range(num_batches_per_epoch):
            x = np.ones((batch_size, sample_length), 'int32') * null_index
            rows = np.random.randint(0,data_size, batch_size)
            for r in range(batch_size):
                sent_len = len(data[rows[r]])
                sample_start_index = np.random.randint(0,sent_len+1, 1)[0]
                sample_end_index = np.minimum(sample_start_index + sample_length, sent_len)
                sample_len = sample_end_index - sample_start_index
                x[r, :sample_len] = data[rows[r]][sample_start_index:sample_end_index]
            yield x

def iter_data(*data, **kwargs):
    size = kwargs.get('size', 128)
    try:
        n = len(data[0])
    except:
        n = data[0].shape[0]
    batches = n / size
    if n % size != 0:
        batches += 1

    for b in range(batches):
        start = b * size
        end = (b + 1) * size
        if end > n:
            end = n
        if len(data) == 1:
            yield data[0][start:end]
        else:
            yield tuple([d[start:end] for d in data])

